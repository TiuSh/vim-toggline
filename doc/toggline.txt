*toggline.txt*  Toggle patterns on the current line

==============================================================================
INTRODUCTION                                                        *toggline*

Sometimes you need to toggle a specific pattern on line under cursor:
add/remove a semicolon at the end of line, add/remove a comma at the beggining
of line,... Toggline Vim Plugin provides a set of functions to help you in
these cases.

==============================================================================
USAGE                                                         *toggline-usage*

Use this plugin by setting your own mappings:

nmap <silent> <leader>; :call Toggline#End(';')<CR>
imap <silent> <leader>; <Esc><Esc>:call Toggline#End(';')<CR>a

Consider this line of code (where [*] represent the position of the cursor):

var foo = { ba[r]: 1 }

Pressing "<leader>;" will result to:

var foo = { ba[r]: 1 };

Note that you can add spaces around the toggled string:

nmap <silent> <leader>, :call Toggline#Start(', ')<CR>

Now consider this code:

var foo = 1
    ,ba[r] = 0;

Pressing "<leader>," will result to:

var foo = 1
    ba[r] = 0;

Pressing "<leader>," again:

var foo = 1
    , ba[r] = 0;


Available helper functions:

------------------------------------------------------------------------------
Toggline#End( str )


Toggle the given string at the end of the line.

  str   {string}  String that will be toggled

------------------------------------------------------------------------------
Toggline#Start( str )


Toggle the given string at the beginning of the line.

  str   {string}  String that will be toggled

------------------------------------------------------------------------------
Toggline#With( enabledPat, disableSub, disabledPat, enableSub )


Toggle the current line using the given expresions and substitutions:

 enabledPat    {string}  Pattern on which the line will be tested. If it
                         matches, the line will be considered as "enabled"
                         and this pattern will be replaced by the
                         "disableSub" argument.
 disableSub    {string}  Substition string applied on "enablePat" if the
                         line is considered "enabled"
 disabledPat   {string}  If the line is considered as "disabled", this
                         pattern will be replaced by the "enableSub"
                         argument.
 enableSub     {string}  Substition string applied with the "enablePat" if the
                         line is considered "disabled"

